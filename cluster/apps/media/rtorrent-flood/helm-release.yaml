---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: rtorrent-flood
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: rtorrent-flood
      version: 9.2.0
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  values:
    podSecurityContext:
      supplementalGroups:
        - 1001
    ingress:
      main:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/icon: "download-network"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
        hosts:
          - host: "flood.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - "flood.${SECRET_DOMAIN}"
            secretName: flood-cert
    persistence:
      downloads:
        enabled: true
        existingClaim: media-nfs-media-pvc
      config:
        enabled: true
        existingClaim: flood-config
    service:
      bittorrent:
        enabled: true
        type: ClusterIP
        ports:
          bittorrent:
            enabled: true
            port: 49671
            protocol: TCP
            targetPort: 49671
    probes:
      liveness:
        enabled: true
        initialDelaySeconds: 60
        failureThreshold: 5
        timeoutSeconds: 10
      readiness:
        enabled: true
        initialDelaySeconds: 60
        failureThreshold: 5
        timeoutSeconds: 10
      startup:
        enabled: true
        initialDelaySeconds: 10
        failureThreshold: 30
        periodSeconds: 10

    config: |
      session.use_lock.set = no
      method.insert = cfg.basedir,  private|const|string, (cat,(fs.homedir),"/.local/share/rtorrent/")
      method.insert = cfg.download, private|const|string, (cat,"/downloads/","downloads/")
      method.insert = cfg.logs,     private|const|string, (cat,(cfg.download),"log/")
      method.insert = cfg.logfile,  private|const|string, (cat,(cfg.logs),"rtorrent-",(system.time),".log")
      method.insert = cfg.session,  private|const|string, (cat,(cfg.basedir),".session/")
      method.insert = cfg.watch,    private|const|string, (cat,(cfg.download),"watch/")
      fs.mkdir.recursive = (cat,(cfg.basedir))
      fs.mkdir = (cat,(cfg.download))
      fs.mkdir = (cat,(cfg.logs))
      fs.mkdir = (cat,(cfg.session))
      fs.mkdir = (cat,(cfg.watch))
      fs.mkdir = (cat,(cfg.watch),"/load")
      fs.mkdir = (cat,(cfg.watch),"/start")
      schedule2 = watch_load, 11, 10, ((load.verbose, (cat, (cfg.watch), "load/*.torrent")))
      schedule2 = watch_start, 10, 10, ((load.start_verbose, (cat, (cfg.watch), "start/*.torrent")))
      throttle.max_uploads.set = 100
      throttle.max_uploads.global.set = 250
      throttle.min_peers.normal.set = 20
      throttle.max_peers.normal.set = 60
      throttle.min_peers.seed.set = 30
      throttle.max_peers.seed.set = 80
      trackers.numwant.set = 80
      network.port_range.set = 49671-49671
      network.max_open_files.set = 600
      network.max_open_sockets.set = 300
      pieces.memory.max.set = 1800M
      session.path.set = (cat, (cfg.session))
      directory.default.set = (cat, (cfg.download))
      log.execute = (cat, (cfg.logs), "execute.log")
      encoding.add = utf8
      system.daemon.set = true
      system.umask.set = 0002
      system.cwd.set = (directory.default)
      network.http.max_open.set = 50
      network.http.dns_cache_timeout.set = 25
      network.scgi.open_local = (cat,(cfg.basedir),rtorrent.sock)
      print = (cat, "Logging to ", (cfg.logfile))
      log.open_file = "log", (cfg.logfile)
      log.add_output = "info", "log"
